import React from "%{ amd: 'react', brunch: '!React', common: 'react' }";
import Backbone from "%{amd: 'backbone', brunch: '!Backbone', common: 'backbone'}";
import i18n from "%{amd: 'i18next', brunch: '!i18next', common: 'i18next'}";
import ReactModelView from "umd-core/src/views/ReactModelView";
import validators from "umd-core/src/validation/validators";
import ModelListener from "umd-core/src/components/ModelListener";
import InputText from "umd-core/src/components/InputText";
import InputWithError from "umd-core/src/components/InputWithError";
import AutogrowTextarea from "umd-core/src/components/AutogrowTextarea";

const states = "AL AK AZ AR CA CO CT DE FL GA HI ID IL IN IA KS KY LA ME MD MA MI MN MS MO MT NE NV NH NJ NM NY NC ND OH OK OR PA RI SC SD TN TX UT VT VA WA WV WI WY".split(" ").map(state => {
    return {
        abbrev: state
    };
});

class UserModel extends Backbone.Model {
    get validation() {
        return {
            email: [validators.required(), validators.email()],
            postalCode: [
                validators.required(), validators.pattern(/^[0-9]{5}$/, {
                    msg(code) {
                        return i18n.t("error.postalCode");
                    }
                })
            ],
            biography: validators.maxLength(150)
        };
    }
}

module.exports = class Step4View extends ReactModelView {
    constructor() {
        super(...arguments);
        this.save = this.save.bind(this);
    }

    initialize() {
        this.user = new UserModel({
            title: "Spy",
            email: "ipsum@loremcom",
            firstName: "Solid",
            lastName: "SNAKE",
            company: "Foxhound",
            address: "Right behind you",
            state: "CA",
            biography: "Born to be a soldier.\n\nDied as a soldier",
            postalCode: "54952"
        });
    }

    save(evt) {
        evt.preventDefault();
        const invalidAttrs = this.user.validate(null, {
            forceUpdate: false
        });

        if (!invalidAttrs) {
            const json = JSON.stringify(this.user.toJSON(), null, 2);
            console.log(json);
            alert(json); // eslint-disable-line no-alert
        }
    }

    render() {
        const user = this.user;

        return (
            <form onSubmit={ this.save } className="container">
                { /*
                    Every time 'vstate' event will be triggered, onEvent will be called and the result will be displayed.
                    'vstate' event is triggered when executing user.validate(null, { forceUpdate: false })
                */ }
                <ModelListener model={ user } events="vstate" onEvent={ (isValid, model, invalidAttrs) => {
                    return (
                        <div spRepeat="(messages, attr) in invalidAttrs" key={ attr }>
                            <h3>{ attr }</h3>
                            <ul className="error-messages">
                                <li className="error-message" spRepeat="(message, index) in messages" key={ index }>{ message }</li>
                            </ul>
                        </div>
                    );
                }} />

                <div className="clearfix">
                    { /*
                        InputText is a fancy input.
                        spModel will cause the owner (Step4View) to update itself on user's firstName change.
                        React will take care of optimisation to only change what has really been changed.
                    */ }
                    <InputText className="col-md-6" spModel={ user.firstName } label={ i18n.t("label.firstName") } />
                    <InputText className="col-md-6" spModel={ user.lastName } label={ i18n.t("label.lastName") } />
                </div>

                <div className="clearfix">
                    <InputText className="col-md-6" spModel={ user.title } label={ i18n.t("label.title") } />

                    { /* a way to show errors of a property */ }
                    <InputWithError spModel={ user.email } className="col-md-6" label={ i18n.t("label.email") } />
                </div>

                <div className="clearfix">
                    <InputText className="col-md-6" spModel={ user.company } label={ `${ i18n.t("label.company") } (${ i18n.t("label.disabled") })` } disabled/>
                </div>

                <div className="clearfix">
                    <InputText className="col-md-6" spModel={ user.address } label={ i18n.t("label.address") } />
                </div>

                <div className="clearfix">
                    <InputText className="col-md-6" spModel={ user.city } label={ i18n.t("label.city") } />

                    <InputText
                        spModel={ user.state }
                        input={ <select>
                            <option spRepeat="state in states" value={ state.abbrev } key={ state.abbrev }>
                                { state.abbrev }
                            </option>
                        </select> }
                        className="col-md-6"
                        label={ i18n.t("label.state") } />

                    <div className="clearfix">
                        <InputWithError spModel={ user.postalCode } className="col-md-6" label={ i18n.t("label.postalCode") } charCount="5" />
                    </div>
                </div>

                <div className="clearfix">
                    <InputWithError
                        input={ AutogrowTextarea }
                        spModel={ user.biography }
                        className="col-md-6"
                        label={ i18n.t("label.biography") } charCount={ UserModel.prototype.validation.biography.fn.options.maxLength } />
                </div>

                { /* Accent-colored raised button with ripple */ }
                <button type="submit" className="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">
                    { i18n.t("save") }
                </button>
            </form>
        );
    }
};
