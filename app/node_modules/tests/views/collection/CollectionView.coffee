deps = [
    'umd-core/src/common'
    'umd-core/src/views/ReactModelView'
    'umd-core/src/models/BackboneCollection'
    'umd-core/src/views/ReactCollectionView'
]

freact = ({ _, i18n, $ }, ReactModelView, BackboneCollection, ReactCollectionView)->
    btnRaisedRipple = 'mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect'
    btnAccent = btnRaisedRipple + ' mdl-button--accent'
    btnDanger = btnRaisedRipple + ' btn-danger'
    btnCancel = btnRaisedRipple + ' mdl-button--colored'

    { byAttributes } = BackboneCollection
    order = byAttributes([
        ['age', -1]
        'lastName'
        'firstName'
        'id'
    ])

    letters = do ->
        letters = new Array(26)

        for i in [0...26] by 1
            letters[i] = String.fromCharCode(97 + i)

        return letters

    generateName = (len, minLen, maxLen)->
        if not len
            len = minLen + Math.random() * (maxLen - minLen)
            len = len >> 0

        name = new Array(len)
        for i in [0...len] by 1
            letter = letters[(25 * Math.random()) >> 0]
            name[i] = letter

        return name.join('')

    generateUser = (len, minLen, maxLen)->
        user = {
            id: _.uniqueId('user')
            firstName: generateName(len, minLen, maxLen)
            lastName: generateName(len, minLen, maxLen).toUpperCase()
            age: 15 + (Math.random() * 60) >> 0
        }

        user.firstName = user.firstName[0].toUpperCase() + user.firstName.slice(1)
        return user

    assertCoherent = (models, done)->
        setTimeout ->
            expectedIds = models.map (user)-> user.id
            actualIds = _.map $('.users .user .id'), (el)-> el.innerHTML

            msg = 'passed'
            for id, i in actualIds
                if id isnt expectedIds[i]
                    err = 'failed at index ' + i
                    msg = 'failed'
                    break

            done err, msg, actualIds, expectedIds
            return
        , 2
        return

    series = (tasks, done)->
        length = tasks.length
        i = 0

        iterate = (err)->
            if err or i is length
                done(err) if 'function' is typeof done
                return

            task = tasks[i++]
            task iterate
            return

        iterate()
        return

    eachSeries = (array, callback, done)->
        length = array.length
        i = 0

        iterate = (err)->
            if err or i is length
                done(err) if 'function' is typeof done
                return

            item = array[i++]
            callback item, iterate
            return

        iterate()
        return

    eachRepeat = (length, callback, done)->
        i = 0

        iterate = (err)->
            if err or i is length
                done(err) if 'function' is typeof done
                return

            callback i++, iterate
            return

        iterate()
        return

    toInteger = (value, def)->
        if 'string' is typeof value and /^\s*\d+\s*$/.test(value)
            return parseInt(value, 10)

        return def

    class CollectionView extends ReactModelView
        initialize: ->
            { queryParams } = @props
            if queryParams
                {len, maxLen, minLen, n, add, change, remove} = queryParams

                if not minLen
                    minLen = 3

                if not maxLen
                    maxLen = 8

                if maxLen < minLen
                    _minLen = maxLen
                    maxLen = minLen
                    minLen = _minLen

                n = toInteger(n, 20)
                add = toInteger(add, n)
                change = toInteger(change, 3 * n)
                remove = toInteger(remove, n)

                if remove > (n + add)
                    remove = n + add

                users = new Array(n)
                for i in [0...n] by 1
                    users[i] = generateUser(len, minLen, maxLen)
                users = new BackboneCollection users
                users.generateUser = generateUser.bind(null, len, minLen, maxLen)

            this.state = {
                users
                order
                add
                change
                remove
            }

            return

        componentDidMount: ->
            super
            if @state.add
                {users, add, change, remove} = @state
                models = @refs.users.state.model.models
                elapsedAdd = null
                elapsedChange = null
                elapsedRemove = null

                series [
                    (next)->
                        assertCoherent models, next
                        return

                    (next)->
                        timerInitAdd = new Date().getTime()
                        eachRepeat add, (i, next)->
                            users.add users.generateUser()

                            assertCoherent models, next
                            return
                        , (err)->
                            elapsedAdd = new Date().getTime() - timerInitAdd
                            next(err)
                            return

                        return

                    (next)->
                        timerInitChange = new Date().getTime()
                        eachRepeat change, (i, next)->
                            index = (users.length * Math.random()) >>> 0
                            user = users.models[index]
                            attributes = users.generateUser()
                            delete attributes.id
                            user.set(attributes)

                            assertCoherent models, next
                            return
                        , (err)->
                            elapsedChange = new Date().getTime() - timerInitChange
                            next(err)
                            return

                        return

                    (next)->
                        timerInitRemove = new Date().getTime()
                        eachRepeat remove, (i, next)->
                            index = (users.length * Math.random()) >>> 0
                            user = users.models[index]
                            users.remove(user)

                            assertCoherent models, next
                            return
                        , (err)->
                            elapsedRemove = new Date().getTime() - timerInitRemove
                            next(err)
                            return

                        return

                ], (err)->
                    result = {
                        status: err or 'passed'
                        add: [elapsedAdd, 'ms'].join(' ')
                        change: [elapsedChange, 'ms'].join(' ')
                        remove: [elapsedRemove, 'ms'].join(' ')
                    }
                    alert JSON.stringify(result, null, 4)
                    return

            return

        childNode: (user)=>
            `<tr className="user" key={ user.id }>
                <td className="id">{ user.get("id") }</td>
                <td>{ user.get("firstName") }</td>
                <td>{ user.get("lastName") }</td>
                <td>{ user.get("age") }</td>
            </tr>`

        render: ->
            `<table className="table striped" style={ { tableLayout: 'fixed' } }>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>{ i18n.t('label.firstName') }</th>
                        <th>{ i18n.t('label.lastName') }</th>
                        <th>{ i18n.t('label.age') }</th>
                    </tr>
                </thead>
                <ReactCollectionView
                    ref="users"
                    tagName="tbody"
                    className="users"
                    model={ this.state.users }
                    order={ this.state.order }
                    childNode={ this.childNode }
                />
            </table>`