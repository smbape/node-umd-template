import React from "%{ amd: 'react', common: '!React' }";
import { i18n } from "umd-core/src/common";
import AbstractModelComponent from "umd-core/src/components/AbstractModelComponent";

// define a menu
const menuCollection = [{
    module: "home",
    controller: "home",
    action: "index"
}, {
    module: "home",
    controller: "home",
    action: "step1"
}, {
    module: "home",
    controller: "home",
    action: "step2"
}, {
    module: "home",
    controller: "home",
    action: "step3"
}, {
    module: "home",
    controller: "home",
    action: "step4"
}, {
    module: "home",
    controller: "step5",
    action: "user-list"
}];

module.exports = class Toolbar extends AbstractModelComponent {
    // explicit I hope
    changeLanguage(evt, lng) {
        evt.preventDefault();
        this.props.app.changeLanguage(lng);
    }

    render() {
        const {app} = this.props;
        const {router} = app;

        // we will use the 'default' routing route defined in AppRouter to create urls matching that route
        // this allows to change the routing configuration like [order of parameters, baseUrl] without having to go through the hard coded urls
        const routerEngine = router.engine("default");

        // get locales will return a map of lng, locale
        // where lng is a language value as displayed in url and locale the associated i18n translation used
        const locales = app.getLocales();

        // keep reference to the current location in order to display the active menu link
        const location = app.getLocation();

        return (
            // 'spModel' causes the component to re-render itself when there is a change of language or a change of navigation
            <div spModel={ [[app, "change:language"], [app, "change:navigation"]] } className="clearfix">
                <div className="pull-left">
                    <div className="languages btn-group">
                        {/*
                        'spRepeat' repeats the node for every languages
                            It is a way to reduce the amount of code written.
                            Without it, you will have to write _.map(collection, () => { return <button/> })
                            Adding a key allows some optimization when updating the repeated nodes
                        'spClick' will execute the given expression on click.
                            [event, domID, originalEvent] variables are available within spClick scope.
                            It is a way to reduce the amount of code written.
                            For example if you want to do onClick doThat(withThis, andThat),
                            You will write onClick={ (function(evt, domID, originalEvent) { doThat(withThis, andThat); }).bind(this) }
                            Or you will define a method and then use that method in onClick
                            It works, but doing it hundreds of time is annoying
                        */}
                        <button spRepeat="(locale, lng) in locales"
                            key={ lng }
                            type="button"
                            className="btn btn-default"
                            spClick={ this.changeLanguage(event, lng) }>
                            { i18n.t("name", { lng: locale }) }
                        </button>
                    </div>
                </div>
                <div className="pull-left">
                    <ul className="menu nav nav-pills nav-fill">
                        {/*
                        'spRepeat' attribute repeat the node for every menu item
                        Adding a key allows some optimization when updating the repeated nodes
                        */}
                        <li spRepeat="(item, index) in menuCollection" key={ index } className="nav-item">
                            <a className={ `nav-link${ location.pathname === routerEngine.getUrl(item) ? " active" : "" }` } href={ routerEngine.getUrl(item) }>
                                { i18n.t(router.getTitle(item)) }
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        );
    }
};
