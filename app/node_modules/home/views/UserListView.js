import React from "%{ amd: 'react', common: '!React' }";
import { i18n } from "umd-core/src/common";
import ReactModelView from "umd-core/src/views/ReactModelView";
import ReactCollectionView from "umd-core/src/views/ReactCollectionView";
import ModalUserEditView from "./ModalUserEditView";
import User from "../models/User";

const btnRaisedRipple = "mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect";
const btnDanger = `${ btnRaisedRipple } btn-danger`;

module.exports = class UserListView extends ReactModelView {
    constructor() {
        super(...arguments);
        this.childNode = this.childNode.bind(this);
    }

    deleteUser(user) {
        if (this.xhr) {
            this.xhr.abort();
            this.xhr = null;
        }

        this.xhr = user.destroy({
            complete: () => {
                const collection = this.props.model;

                // reset the collection with data comming from the server
                this.xhr = collection.fetch({
                    reset: true
                }, {
                    complete: () => {
                        this.xhr = null;
                    }
                });
            }
        });
    }

    componentWillUnmount() {
        if (this.xhr) {
            this.xhr.abort();
            this.xhr = null;
        }

        super.componentWillUnmount();
    }

    childNode(user, index) {
        return (
            <tr className="user" key={ user.id }>
                <td>{ user.get("firstName") }</td>
                <td>{ user.get("lastName") }</td>
                <td>{ user.get("age") }</td>
                <td>
                    { /* We clone the user model to only update data on save, not on cancel */ }
                    <ModalUserEditView
                        href={ this.props.getEditUrl(user) }
                        model={ user.clone() }
                        onSave={ this.props.onSave }
                        onDelete={ this.props.onDelete }
                        onCancel={ this.props.onCancel } />
                    &nbsp;&nbsp;
                    <button spClick={ this.deleteUser(user) } type="button" className={ `delete-user ${ btnDanger }` }>
                        { i18n.t("button.delete") }
                    </button>
                </td>
            </tr>
        );
    }

    render() {
        return (
            <div>
                <ModalUserEditView
                    href={ this.props.getEditUrl() }
                    model={ new User() }
                    onSave={ this.props.onSave }
                    onDelete={ this.props.onDelete }
                    onCancel={ this.props.onCancel } />

                <br/><br/>

                <table className="table striped" style={ { tableLayout: "fixed" } }>
                    <thead>
                        <tr>
                            <th>{ i18n.t("label.firstName") }</th>
                            <th>{ i18n.t("label.lastName") }</th>
                            <th>{ i18n.t("label.age") }</th>
                            <th />
                        </tr>
                    </thead>
                    <ReactCollectionView
                        tagName="tbody"
                        className="users"
                        model={ this.props.model }
                        childNode={ this.childNode }
                    />
                </table>
            </div>
        );
    }
};
