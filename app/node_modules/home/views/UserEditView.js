import React from "%{ amd: 'react', common: '!React' }";
import { i18n } from "umd-core/src/common";
import ReactModelView from "umd-core/src/views/ReactModelView";
import InputText from "umd-core/src/components/InputText";
import InputWithError from "umd-core/src/components/InputWithError";

const btnRaisedRipple = "mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect";
const btnAccent = `${ btnRaisedRipple } mdl-button--accent`;
const btnDanger = `${ btnRaisedRipple } btn-danger`;
const btnCancel = `${ btnRaisedRipple } mdl-button--colored`;

module.exports = class UserEditView extends ReactModelView {
    constructor() {
        super(...arguments);
        this.handleDelete = this.handleDelete.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
        this.onCancel = this.onCancel.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onSave = this.onSave.bind(this);
    }

    onSave() {
        if (this.props.onSave) {
            this.props.onSave.apply(this.props, arguments);
        }
    }

    onDelete() {
        if (this.props.onDelete) {
            this.props.onDelete.apply(this.props, arguments);
        }
    }

    onCancel() {
        if (this.props.onCancel) {
            this.props.onCancel.apply(this.props, arguments);
        }
    }

    handleSubmit(evt) {
        // do not perform the browser default submit behaviour
        // because we will handle submit action
        evt.preventDefault();

        const user = this.props.model;
        const invalidAttrs = user.validate(null, {
            forceUpdate: false
        });

        // There is no need to call the server
        // when values are invalid
        if (invalidAttrs) {
            return;
        }

        // Abort any pending request
        if (this.xhr) {
            this.xhr.abort();
            this.xhr = null;
        }

        // Tell the server to save data
        this.xhr = user.save(null, {
            success: this.onSave,
            complete: () => {
                this.xhr = null;
            }
        });
    }

    handleDelete(evt) {
        // do not perform the browser default behaviour
        // because we will handle the behaviour
        evt.preventDefault();

        // Abort any pending request
        if (this.xhr) {
            this.xhr.abort();
            this.xhr = null;
        }

        // Tell the server to delete data
        this.props.model.destroy({
            success: this.onSave,
            complete: () => {
                this.xhr = null;
            }
        });
    }

    componentWillUnmount() {
        if (this.xhr) {
            this.xhr.abort();
            this.xhr = null;
        }
        super.componentWillUnmount();
    }

    render() {
        const user = this.props.model;

        return (
            <form onSubmit={ this.handleSubmit } className="container">
                {/* title */}
                <h4>{ i18n.t(`label.user.${ this.props.model.id ? "edit" : "create" }`) }</h4>

                {/* fieldset */}
                <InputText spModel={ user.firstName } label={ i18n.t("label.firstName") } />
                <InputWithError spModel={ user.lastName } label={ i18n.t("label.lastName") } />
                <InputText spModel={ user.age } label={ i18n.t("label.age") } />

                {/* buttons */}
                <button spShow={ this.props.model.id } onClick={ this.handleDelete } type="button" className={ btnDanger }>
                    { i18n.t("button.delete") }
                </button>
                &nbsp;&nbsp;
                <button type="button" onClick={ this.onCancel } className={ btnCancel }>
                    { i18n.t("button.cancel") }
                </button>
                &nbsp;&nbsp;
                <button type="submit" className={ btnAccent }>
                    { i18n.t("button.save") }
                </button>
            </form>
        );
    }
};
