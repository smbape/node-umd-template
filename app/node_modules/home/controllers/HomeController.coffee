deps = [
    'application'
    'umd-core/src/common'
    'umd-core/src/ClientController'
    'umd-core/src/models/BackboneCollection'
    'umd-core/src/views/ReactModelView'
    'umd-core/src/views/ReactCollectionView'
    'umd-core/src/components/InputText'
    'umd-core/src/components/InputWithError'
    'umd-core/src/validation/validators'
    '../test/mock'
]

freact = (app, {_, $, Backbone, i18n}, ClientController, BackboneCollection, ReactModelView, ReactCollectionView, InputText, InputWithError, validators)->
    # https://github.com/thomasdavis/backbonetutorials/blob/gh-pages/videos/beginner/index.html
    # https://www.youtube.com/watch?v=FZSjvWtUxYk

    btnRaisedRipple = 'mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent'
    btnAccent = btnRaisedRipple + ' mdl-button--accent'
    btnDanger = btnRaisedRipple + ' btn-danger'
    btnColored = btnRaisedRipple + ' mdl-button--colored'

    class User extends Backbone.Model
        urlRoot: '/rest/users'
        validation: lastName: validators.required()

    class UserList extends BackboneCollection
        url: '/rest/users'
        model: User

    class UserListView extends ReactModelView
        constructor : (props)->
            super

        deleteUser: (user)->
            users = @props.model
            controller = @props.controller

            app.showLoader()
            user.destroy complete: ->
                app.hideLoader()
            return

        childNode: (user, index)=>
            `<tr className="user" key={index}>
                <td>{ user.get("firstName") }</td>
                <td>{ user.get("lastName") }</td>
                <td>{ user.get("age") }</td>
                <td>
                    <a className={'edit-user ' + btnAccent} href={this.props.controller.getUrl({action: 'edit-user', id: user.id})}>
                        {i18n.t('button.edit')}
                    </a>
                    &nbsp;&nbsp;
                    <button spClick={this.deleteUser(user)} type="button" className={'delete-user ' + btnDanger}>
                        {i18n.t('button.delete')}
                    </button>
                </td>
            </tr>`

        render: ->
            controller = @props.controller
            users = @props.model

            `<div className="container-fluid">
                <a href={controller.getUrl({action: 'edit-user', id: null})} className={'create-user ' + btnAccent}>
                    {i18n.t('label.user.create')}
                </a>
                <hr />
                <table className="table striped" style={{tableLayout: 'fixed'}}>
                    <thead>
                        <tr>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Age</th>
                            <th />
                        </tr>
                    </thead>
                    <ReactCollectionView tagName="tbody" className="users" model={users} childNode={this.childNode}/>
                </table>
            </div>`

    class EditView extends ReactModelView
        saveUser: (evt)->
            evt.preventDefault()
            user = @props.model
            invalidAttrs = user.validate null, {forceUpdate: false}
            if not invalidAttrs
                controller = @props.controller

                app.showLoader()
                user.save null, success: (user)->
                    controller.navigate {action: 'step5', id: null}
                    app.hideLoader()
                    return
            return

        deleteUser: (user)->
            controller = @props.controller

            app.showLoader()
            user.destroy success: ->
                controller.navigate {action: 'step5', id: null}
                app.hideLoader()
                return

            return

        render: ->
            {model: user, controller} = @props

            `<form spSubmit={this.saveUser(event)} className="container">
                <legend>{i18n.t('label.user.' + (this.props.creation ? 'create' : 'edit'))}</legend>

                <InputText spModel={user.firstName} label={i18n.t('label.firstName')} />
                <InputWithError spModel={user.lastName} label={i18n.t('label.lastName')} />
                <InputText spModel={user.age} label={i18n.t('label.age')} />

                <button spClick={this.deleteUser(user)} type="button" className={btnDanger}>
                    {i18n.t('button.delete')}
                </button>
                &nbsp;&nbsp;
                <button type="button"
                    spClick={controller.navigate({action: 'step5', id: null})}
                    className={btnColored}>
                    {i18n.t('button.cancel')}
                </button>
                &nbsp;&nbsp;
                <button type="submit" className={btnAccent}>
                    {i18n.t('button.save')}
                </button>
            </form>`

    class HomeController extends ClientController
        step5Action: (done)->
            self = @
            model = new UserList()
            self.view = UserListView.createElement
                container: self.get('container')
                controller: self
                model: model

            app.showLoader()
            self.render done
            model.fetch complete: ->
                app.hideLoader()
                return
            return

        editUserAction: (done)->
            self = @
            user = new User id: @get('pathParams').id
            self.view = EditView.createElement
                container: self.get('container')
                controller: self
                model: user
                creation: !user.id

            if user.id
                app.showLoader()
                self.render done
                user.fetch complete: ->
                    app.hideLoader()
                    return
            else
                self.render done

            return
