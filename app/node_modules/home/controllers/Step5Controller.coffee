deps = [
    'umd-core/src/common'
    'umd-core/src/ClientController'
    'umd-core/src/models/BackboneCollection'
    'umd-core/src/validation/validators'
    'umd-core/src/views/ReactModelView'
    'umd-core/src/views/ReactCollectionView'
    'umd-core/src/components/AbstractModelComponent'
    'umd-core/src/components/InputText'
    'umd-core/src/components/InputWithError'
    '../test/mock' # Simulate ajax calls to /rest/users
]

freact = (
    { Backbone, i18n }
    ClientController
    BackboneCollection
    validators
    ReactModelView
    ReactCollectionView
    AbstractModelComponent
    InputText
    InputWithError
)->

    btnRaisedRipple = 'mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect'
    btnAccent = btnRaisedRipple + ' mdl-button--accent'
    btnDanger = btnRaisedRipple + ' btn-danger'
    btnCancel = btnRaisedRipple + ' mdl-button--colored'

    # ================================================================
    # /!\ Note
    # ================================================================
    # Models may be used by multiple views and/or controllers.
    # Views may be used by multiple controllers.
    # 
    # For that reason, it is a good idea to put each Model and View in its own file.
    # However, for the simplicity of this tutorial, we will not do that.

    class User extends Backbone.Model
        # http://backbonejs.org/#Model-urlRoot
        # GET    "[urlRoot]/id" to read values of a model
        # PUT    "[urlRoot]/id" to update values of a model
        # PATCH  "[urlRoot]/id" to patch values of a model
        # DELETE "[urlRoot]/id" to delete a model
        urlRoot: '/rest/users'

        validation: lastName: validators.required()

    class UserList extends BackboneCollection
        # http://backbonejs.org/#Model-url
        # GET    "[collection.url]"    to read all values of a collection
        # GET    "[collection.url]/id" to read values of a model
        # PUT    "[collection.url]/id" to update values of a model
        # PATCH  "[collection.url]/id" to patch values of a model
        # DELETE "[collection.url]/id" to delete a model
        url: '/rest/users'

        # http://backbonejs.org/#Collection-model
        model: User

    class UserListView extends ReactModelView

        deleteUser: (user)->
            # abort any pending request
            if @xhr
                @xhr.abort()
                @xhr = null

            @xhr = user.destroy complete: =>
                collection = this.props.model

                # reset the collection,
                # making sure data were persisted on the server
                @xhr = collection.fetch {reset: true}, complete: =>
                    @xhr = null
                    return

                return
            return

        componentWillUnmount: ->
            if @xhr
                @xhr.abort()
                @xhr = null
            super
            return

        # note the '=>' instead of '->'
        # it will cause this.childNode = this.childNode.bind(this)
        # By doing that, we make sure this.deleteUser and this.props.getEditUrl
        #   are what we expect them to be inside childNode function
        # For more information on binding,
        # see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
        childNode: (user, index)=>
            `<tr className="user" key={ user.id }>
                <td>{ user.get("firstName") }</td>
                <td>{ user.get("lastName") }</td>
                <td>{ user.get("age") }</td>
                <td>
                    <a className={ 'edit-user ' + btnAccent } href={ this.props.getEditUrl(user) }>
                        { i18n.t('button.edit') }
                    </a>
                    &nbsp;&nbsp;
                    <button spClick={ this.deleteUser(user) } type="button" className={ 'delete-user ' + btnDanger }>
                        { i18n.t('button.delete') }
                    </button>
                </td>
            </tr>`

        render: ->
            `<div>
                <a href={ this.props.getEditUrl() } className={ 'create-user ' + btnAccent }>
                    { i18n.t('label.user.create') }
                </a>

                <br/><br/>

                <table className="table striped" style={ { tableLayout: 'fixed' } }>
                    <thead>
                        <tr>
                            <th>{ i18n.t('label.firstName') }</th>
                            <th>{ i18n.t('label.lastName') }</th>
                            <th>{ i18n.t('label.age') }</th>
                            <th />
                        </tr>
                    </thead>
                    <ReactCollectionView
                        tagName="tbody"
                        className="users"
                        model={ this.props.model }
                        childNode={ this.childNode }
                    />
                </table>
            </div>`

    class EditView extends ReactModelView
        # note the '=>' instead of '->'
        onSave: =>
            if @props.onSave
                @props.onSave.apply @props, arguments
            return

        # note the '=>' instead of '->'
        onDelete: =>
            if @props.onDelete
                @props.onDelete.apply @props, arguments
            return

        # note the '=>' instead of '->'
        onCancel: =>
            if @props.onCancel
                @props.onCancel.apply @props, arguments
            return

        # note the '=>' instead of '->'
        handleSubmit: (evt)=>
            # do not perform the default submit
            # because we will handle submit action
            evt.preventDefault()

            user = @props.model
            invalidAttrs = user.validate null, { forceUpdate: false }

            if invalidAttrs
                # Avoid calling the server
                # when values are invalid.
                return

            # Abort any pending request
            if @xhr
                @xhr.abort()
                @xhr = null

            @xhr = user.save null, {
                success: @onSave
                complete: =>
                    @xhr = null
                    return
            }
            return

        # note the '=>' instead of '->'
        handleDelete: (evt)=>
            evt.preventDefault()

            if @xhr
                @xhr.abort()
                @xhr = null

            @props.model.destroy {
                success: @onSave
                complete: =>
                    @xhr = null
                    return
            }
            return

        componentWillUnmount: ->
            if @xhr
                @xhr.abort()
                @xhr = null
            super
            return

        render: ->
            user = @props.model

            `<form onSubmit={ this.handleSubmit } className="container">
                {/* title */}
                <h4>{ i18n.t('label.user.' + (this.props.model.id ? 'edit' : 'create')) }</h4>

                {/* fieldset */}
                <InputText spModel={ user.firstName } label={ i18n.t('label.firstName') } />
                <InputWithError spModel={ user.lastName } label={ i18n.t('label.lastName') } />
                <InputText spModel={ user.age } label={ i18n.t('label.age') } />

                {/* buttons */}
                <button spShow={ this.props.model.id } onClick={ this.handleDelete } type="button" className={ btnDanger }>
                    { i18n.t('button.delete') }
                </button>
                &nbsp;&nbsp;
                <button type="button" onClick={ this.onCancel } className={ btnCancel }>
                    { i18n.t('button.cancel') }
                </button>
                &nbsp;&nbsp;
                <button type="submit" className={ btnAccent }>
                    { i18n.t('button.save') }
                </button>
            </form>`

    class Step5Controller extends ClientController
        # note the '=>' instead of '->'
        getEditUrl: (user)=>
            @getUrl({
                action: 'edit-user'
                id: user and user.id or null
            }, {
                # remember where we come from
                # and come back when save is done
                query: redirect: @get('router').getCurrentUrl()
            })

        # note the '=>' instead of '->'
        onSave: =>
            if redirect = @get('queryParams').redirect
                @navigate redirect, { force: true }
            else
                @get('router').refresh()
            return

        # note the '=>' instead of '->'
        onDelete: =>
            if redirect = @get('queryParams').redirect
                @navigate redirect, { force: true }
            else
                @get('router').refresh()
            return

        # note the '=>' instead of '->'
        onCancel: =>
            if redirect = @get('queryParams').redirect
                @navigate redirect, { force: true }
            else
                @get('router').refresh()
            return

        listUserAction: (done)->
            list = new UserList()
            @render UserListView, {
                model: list
                getEditUrl: @getEditUrl
                onSave: @onSave
                onDelete: @onDelete
                onCancel: @onCancel
            }, done
            list.fetch()
            return

        editUserAction: (done)->
            user = new User id: @get('pathParams').id
            render = @render.bind @, EditView, {
                model: user
                onSave: @onSave
                onDelete: @onDelete
                onCancel: @onCancel
            }, done

            if user.id
                user.fetch complete: render
            else
                render()

            return
