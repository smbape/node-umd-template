deps = [
    'umd-core/src/common'
    'umd-core/src/models/BackboneCollection'
    { amd: 'jquery-mockjax' }
]

freact = ({ $ }, BackboneCollection)->

    userList = new BackboneCollection [{
        id: 1
        firstName: 'Solid'
        lastName: 'SNAKE'
        age: 1
    }, {
        id: 2
        firstName: 'Mikasa'
        lastName: 'ACKERMAN'
        age: 3
    }, {
        id: 3
        firstName: 'Integra'
        lastName: 'FAIRBOOK WINGATES HELLSING'
        age: 4
    }, {
        id: 4
        firstName: 'Wade'
        lastName: 'WILSON'
        age: 2
    }]

    responseTime = [50, 300]
    url = '/rest/users'
    urlWithIdReg = /^\/rest\/users\/(\d+)$/

    # https://github.com/jakerella/jquery-mockjax

    $.mockjax
        url: url
        type: 'GET'
        responseTime: responseTime,
        response: ->
            this.responseText = userList.toJSON()
            return

    $.mockjax
        url: urlWithIdReg
        urlParams: ['id'],
        type: 'GET'
        responseTime: responseTime,
        response: (settings)->
            id = settings.urlParams.id
            this.responseText = userList.get id
            return

    ids = userList.length
    $.mockjax
        url: url
        type: 'POST'
        responseTime: responseTime,
        response: (settings)->
            data = JSON.parse settings.data
            data.id = ++ids
            user = userList.add data, { merge: true }
            this.responseText = { id: user.id }
            return

    $.mockjax
        url: urlWithIdReg
        urlParams: ['id'],
        type: 'PUT'
        responseTime: responseTime,
        response: (settings)->
            id = settings.urlParams.id
            data = JSON.parse settings.data
            user = userList.get id
            for own prop of user.attributes
                delete user.attributes[prop]
            user.set data
            this.responseText = { id: user.id }
            return

    $.mockjax
        url: urlWithIdReg
        urlParams: ['id'],
        type: 'PATCH'
        responseTime: responseTime,
        response: (settings)->
            id = settings.urlParams.id
            data = JSON.parse settings.data
            user = userList.get id
            user.set data
            this.responseText = { id: user.id }
            return

    $.mockjax
        url: urlWithIdReg
        urlParams: ['id'],
        type: 'DELETE'
        responseTime: responseTime,
        response: (settings)->
            id = settings.urlParams.id
            userList.remove id
            this.responseText = { id }
            return

    return

