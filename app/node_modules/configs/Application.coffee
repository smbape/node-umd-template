deps = [
    'umd-core/src/common'
    'umd-core/src/BasicBackboneApplication'
    'umd-core/src/internationalize'
    'umd-core/src/components/AbstractModelComponent'
    './AppRouter'
    './resources'
]

# When using React, use 'freact' function instead of 'factory' function
# It exposes React and ReactDOM variables
# React is not a requirement to use the building system,
# that's why there is a distinction
freact = ({ _, $, i18n }, BasicBackboneApplication, internationalize, AbstractModelComponent, AppRouter, resources)->

    class Application extends BasicBackboneApplication
        name: 'application'

        initRouter: (options)->
            app = @

            # append some containers
            $(document.body).append """
                <div id="toolbar"></div>
                <div id="content"></div>
            """

            # instantiate the router, telling it to render content in '#content'
            # the router defines what to do when an url is requested
            app.router = new AppRouter
                app: app
                container: document.getElementById('content')

            return

        init: ->
            # multilingual configuration
            @addInitializer internationalize

            @addInitializer (options)->
                app = @
                router = @router

                # add translations
                app.updateResources resources

                # we will use the 'default' routing engine defined in AppRouter to create URL
                # this allows to change configuration like [order of parameters, baseUrl] without having to go through all the hard coded urls
                routerEngine = router.engine('default')

                # get locales will return a map of lng, locale
                # where lng is a language value as displayed in url and locale the associated i18n translation used
                locales = app.getLocales()

                # define a menu
                menuCollection = [{
                    module: 'home'
                    controller: 'home'
                    action: 'index'
                }, {
                    module: 'home'
                    controller: 'home'
                    action: 'step1'
                }]

                class Toolbar extends AbstractModelComponent

                    # self explanatory I hope
                    changeLanguage: (evt, lng)->
                        evt.preventDefault()
                        app.changeLanguage lng
                        return

                    render: ->
                        ###
                            'spModel' is a custom defined attributes make the view re-render itselft every time app.set('language', lng) is done
                            'spRepeat' is a custom defined attribute that will repeat the node.
                                If there is no key in an array of components,
                                React will complain about it in dev mode
                            'spClick' is a custom defined attribute that will execute the given expression on click.
                                [event, domID, originalEvent] are variables available within spClick scope.
                                With the classic onClick, you have to do a reverse engineering to know what is exactly done.
                                For example if you want to do onClick doThat(withThis, andThat),
                                if will be onClick={ function(evt) { doThat(withThis, andThat); } }
                                It works, but it is annoying to always have to put 'function(evt) {' and '}'
                        ###
                        `<div spModel={ app.language } className="clearfix">
                            <div className="pull-left">
                                <div className="languages btn-group">
                                    <button spRepeat="(locale, lng) in locales"
                                        type="button"
                                        className="btn btn-default"
                                        spClick={ this.changeLanguage(event, lng) }
                                        key={ lng }>
                                        { i18n.t('name', { lng: locale }) }
                                    </button>
                                </div>
                            </div>
                            <div className="pull-left">
                                <ul className="menu nav nav-pills">
                                    <li spRepeat="(entry, index) in menuCollection" key={ index }>
                                        <a href={ routerEngine.getUrl(entry) }>
                                            { i18n.t(router.getTitle(entry)) }
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>`

                ReactDOM.render `<Toolbar />`, document.getElementById('toolbar')

            return