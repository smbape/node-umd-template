deps = [
    'umd-core/src/common'
    'umd-core/src/components/AbstractModelComponent'
]

# When using React, use 'freact' function instead of 'factory' function
# It exposes React and ReactDOM variables
freact = ({ _, i18n }, AbstractModelComponent)->
    # define a menu
    menuCollection = [{
        module: 'home'
        controller: 'home'
        action: 'index'
    }, {
        module: 'home'
        controller: 'home'
        action: 'step1'
    }, {
        module: 'home'
        controller: 'home'
        action: 'step2'
    }, {
        module: 'home'
        controller: 'home'
        action: 'step3'
    }, {
        module: 'home'
        controller: 'home'
        action: 'step4'
    }, {
        module: 'home'
        controller: 'step5'
        action: 'list-user'
    }, {
        module: 'tests'
        controller: 'collection'
        action: 'collection'
    }]

    class Toolbar extends AbstractModelComponent

        # self explanatory I hope
        changeLanguage: (evt, lng)->
            evt.preventDefault()
            @props.app.changeLanguage lng
            return

        render: ->
            { app } = @props
            { router } = app

            # we will use the 'default' routing engine defined in AppRouter to create URL
            # this allows to change configuration like [order of parameters, baseUrl] without having to go through all the hard coded urls
            routerEngine = router.engine('default')

            # get locales will return a map of lng, locale
            # where lng is a language value as displayed in url and locale the associated i18n translation used
            locales = app.getLocales()

            ###
                'spModel' is a custom defined attributes that makes the view to re-render itselft every time app.set('language', lng) is done
                'spRepeat' is a custom defined attribute that will repeat a node.
                    If there is no key in an array of components,
                    React will complain about it in dev mode
                'spClick' is a custom defined attribute that will execute the given expression on click.
                    [event, domID, originalEvent] are variables available within spClick scope.
                    It is a convenience way to reduce amount of code written
                    For example if you want to do onClick doThat(withThis, andThat),
                    if will be onClick={ (function(evt, domID, originalEvent) { doThat(withThis, andThat); }).bind(this) }
                    It works, but it is annoying to always have to put '(function(evt, domID, originalEvent) {' and '}).bind(this)'
            ###
            `<div spModel={ app.language } className="clearfix">
                <div className="pull-left">
                    <div className="languages btn-group">
                        <button spRepeat="(locale, lng) in locales" key={ lng }
                            type="button"
                            className="btn btn-default"
                            spClick={ this.changeLanguage(event, lng) }
                        >
                            { i18n.t('name', { lng: locale }) }
                        </button>
                    </div>
                </div>
                <div className="pull-left">
                    <ul className="menu nav nav-pills">
                        <li spRepeat="(entry, index) in menuCollection" key={ index }>
                            <a href={ routerEngine.getUrl(entry) }>
                                { i18n.t(router.getTitle(entry)) }
                            </a>
                        </li>
                    </ul>
                </div>
            </div>`
