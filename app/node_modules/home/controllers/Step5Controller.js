import ClientController from "umd-core/src/ClientController";
import UserListView from "../views/UserListView";
import UserEditView from "../views/UserEditView";
import User from "../models/User";
import UserList from "../models/UserList";
import "../test/mock"; // Simulate ajax calls to /rest/users

// According to our router defined in `app/node_modules/configs/AppRouter.js`
// urls matching "{ build:(app|web) }/{ language }/home/step5/{ action }/*"
// will be handled by app/node_modules/home/controllers/Step5Controller
// ClientController implementation tells the router
// to handle some-action-name with someActionNameAction method
// therefore, user-list will be handled by userListAction
//           user-edit will be handled by userEditAction
module.exports = class Step5Controller extends ClientController {
    constructor() {
        super(...arguments);
        this.onCancel = this.onCancel.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onSave = this.onSave.bind(this);
        this.getEditUrl = this.getEditUrl.bind(this);
    }

    userListAction(done) {
        const list = new UserList();

        // render UserListView using the specified properties
        this.render(UserListView, {
            model: list,
            getEditUrl: this.getEditUrl,
            onSave: this.onSave,
            onDelete: this.onDelete,
            onCancel: this.onCancel
        }, done);

        list.fetch();
    }

    userEditAction(done) {
        // user-edit action can take an optionnal path parameter "id"
        // when the "id" parameter is defined,
        // edit the user corresponding the "id" parameter
        const user = new User({
            id: this.get("pathParams").id
        });

        // render UserEditView using the specified properties
        const render = this.render.bind(this, UserEditView, {
            model: user,
            onSave: this.onSave,
            onDelete: this.onDelete,
            onCancel: this.onCancel
        }, done);

        if (user.id) {
            // edit requested user
            user.fetch({
                complete: render
            });
        } else {
            // edit new user
            render();
        }
    }

    getEditUrl(user) {
        return this.getUrl({
            action: "user-edit",
            id: user && user.id || null
        }, {
            query: {
                redirect: this.get("router").getCurrentUrl()
            }
        });
    }

    onSave() {
        const redirect = this.get("queryParams").redirect;

        if (redirect) {
            this.navigate(redirect, {
                // force reload even if we are already on the requested url
                force: true
            });
        } else {
            this.get("router").refresh();
        }
    }

    onDelete() {
        const redirect = this.get("queryParams").redirect;

        if (redirect) {
            this.navigate(redirect, {
                // force reload even if we are already on the requested url
                force: true
            });
        } else {
            this.get("router").refresh();
        }
    }

    onCancel() {
        const redirect = this.get("queryParams").redirect;

        if (redirect) {
            this.navigate(redirect, {
                // force reload even if we are already on the requested url
                force: true
            });
        } else {
            this.get("router").refresh();
        }
    }
};
