diff -rupN a/io/exec.js b/io/exec.js
--- a/io/exec.js
+++ b/io/exec.js
@@ -18,7 +18,8 @@
 'use strict';
 
 const childProcess = require('child_process');
-
+const psTree = require('ps-tree');
+const isWin = process.platform === 'win32';
 
 /**
  * A hash with configuration options for an executed command.
@@ -94,10 +95,55 @@
    * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.
    */
   kill(opt_signal) {
-    KILL_HOOK.get(this)(opt_signal || 'SIGTERM');
+    return KILL_HOOK.get(this)(opt_signal || 'SIGTERM');
   }
 }
 
+const killProccessTree = (pid, signal, cb) => {
+  if (isWin) {
+    childProcess.exec(`taskkill /f /t /pid ${ pid }`, (err, stdout, stderr) => {
+      cb(err);
+    });
+    return;
+  }
+
+  psTree(pid, (err, children) => {
+    if (err) {
+      try {
+        process.kill(pid, signal);
+      } catch ( ex ) {
+        // Ignore error to not abort the kill process
+      }
+
+      cb();
+      return;
+    }
+
+    const pids = children.map(p => p.PID).reverse();
+
+    const iterate = err => {
+      if (err) {
+        cb(err);
+        return;
+      }
+
+      if (pids.length !== 0) {
+        killProccessTree(pids.pop(), signal, iterate);
+        return;
+      }
+
+      try {
+        process.kill(pid, signal);
+      } catch ( ex ) {
+        // Ignore error to not abort the kill process
+      }
+
+      cb();
+    };
+
+    iterate();
+  });
+};
 
 // PUBLIC API
 
@@ -137,11 +183,24 @@
   }
 
   function killCommand(signal) {
-    process.removeListener('exit', onProcessExit);
-    if (proc) {
-      proc.kill(signal);
-      proc = null;
+    if (!proc) {
+      return;
     }
+
+    process.removeListener('exit', onProcessExit);
+
+    const child = proc;
+    proc = null;
+
+    return new Promise((resolve, reject) => {
+      killProccessTree(child.pid, signal, err => {
+        if (err) {
+          reject(err);
+        } else {
+          resolve();
+        }
+      });
+    });
   }
 };
 
