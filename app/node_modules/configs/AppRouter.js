// in amd mode, i18next is available under i18next module name
// in commonjs mode, i18next is available under the global variable i18next
import i18n from "%{ amd: 'i18next', common: '!i18next' }";

// Any router class should be an extension of BaseRouter
import BaseRouter from "umd-core/src/BaseRouter";

module.exports = class AppRouter extends BaseRouter {
    // routes are defined in 'routes' property
    // the property can either be a function returning an object or an object itself
    // route matching is case insensitive
    routes() {
        // The application instance is available under this.app
        const app = this.app;

        return {
            // parse urls matching app/b/c/d/e/key/value as
            // {
            //     build: app, // only app or web are allowed
            //     language: b,
            //     module: c,
            //     controller: d,
            //     action: e,
            //     key: value
            // }
            "{ build:(app|web) }/{ language }/{ module }/{ controller }/{ action }/*": {
                // the name which references this route
                name: "default",

                // Allowed serving the application under sub url
                // this is an alternative to <base> html tag, which may have some unwanted drawbacks
                // http://webdesign.tutsplus.com/articles/quick-tip-set-relative-urls-with-the-base-tag--cms-21399
                // Defined in app/assets/index.jst
                baseUrl: app.get("baseUrl"),

                // define the default values of parameters
                defaults: {
                    // Defined in index.jst
                    build: app.get("build"),

                    language: "en",
                    module: "home",
                    controller: "home",
                    action: "index",
                },

                // what should be tried to handle an incomming url request
                // if there is no suitable handler, onRouteChangeFailure is called.
                handlers: [
                    {
                        // if it exists, use the controller defined at app/node_modules/{module}/controllers/{controller}Controller
                        type: "controller", // This handler will expect controllers
                        route: "{module}/controllers/{controller}",
                        camel: true, // transform some-controller-name into SomeControllerName
                        suffix: "Controller",
                    },
                    {
                        // if it exists, render the view defined at app/node_modules/{module}/views/{controller}/{Action}View
                        type: "view", // This handler will expect views
                        route: "{module}/views/{controller}/{action}",
                        camel: true, // transform some-view-name into SomeViewName
                        suffix: "View",
                    },
                    {
                        // if it exists, display the template file app/node_modules/{ module }/templates/{ controller }/{ action }
                        type: "template", // This handler will expect templates
                        route: "{ module }/templates/{ controller }/{ action }",
                    }
                ]
            }
        };
    }

    // called when a matching route was found but no handler is appropriate
    onRouteChangeFailure(err, {container}) {
        container.innerHTML = err;
    }

    // called when no matching route was found
    otherwise(options, done) {
        // Because we are redirecting to another page, mark the current process as done.
        // There cannot be 2 rendering task in the same process
        // This is an implementation constraint
        done();

        // Once the current process is marked as done,
        // redirect to the default url
        this.navigate(this.engine("default").getUrl(), {
            trigger: true,
            replace: true
        });
    }

    getTitle(params) {
        if (params) {
            const {module, controller, action} = params;
            return i18n.t(`${ module }.${ controller }.${ action }.title`);
        }

        return null;
    }

    onRouteChangeSuccess(rendable, handlerOptions, options) {
        const {container, pathParams} = handlerOptions;

        if (this.isMainContainer(container)) {
            const title = this.getTitle(pathParams);
            if (title) {
                document.title = `${ title } - Tutorial`;
            }

            // Publicly notify onRouteChangeSuccess
            // letting any third party tasks as tests know when to start running tests
            // window.appConfig is a global object defined in app/assets/index.jst
            if ("function" === typeof window.appConfig.onRouteChangeSuccess) {
                window.appConfig.onRouteChangeSuccess();
            }
        }
    }
};
