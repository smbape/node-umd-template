# set dependencies
deps = [
    {
        # in amd, i18next is available under i18next module name
        amd: 'i18next'

        # in commonjs, i18next is available under the global variable i18next
        common: '!i18next'
    }

    # Any router class should be an extension of BasicRouter
    'umd-core/src/BasicRouter'
]

# factory function will be called with dependencies
factory = (i18n, BasicRouter)->

    class AppRouter extends BasicRouter

        # define routes in 'routes' property
        # can be a function returning an object or an object itself
        routes: ->
            # application instance is available under this.app
            app = @app

            # parse url app/b/c/d/e/key/value as
            # {
            #     build: app, // only app or web are allowed
            #     language: b,
            #     module: c,
            #     controller: d,
            #     action: e,
            #     key: value
            # }
            '{ build:(app|web) }/{ language }/{ module }/{ controller }/{ action }/*':

                # used to reference this engine
                name: 'default'

                # automaticaly setted.
                # Allowed serving the application under sub url
                # this is an alternative to <base> html tag, which may have some unwanted drawbacks
                # http://webdesign.tutsplus.com/articles/quick-tip-set-relative-urls-with-the-base-tag--cms-21399
                baseUrl: app.get('baseUrl')

                # define default values of parameters
                defaults:

                    # automaticaly setted
                    build: app.get('build')

                    language: 'en'
                    module: 'home'
                    controller: 'home'
                    action: 'index'

                # what should be try to handle an incomming url request
                # if nothing matches, onRouteChangeFailure is called
                handlers: [
                    {
                        # if it exists, render the controller defined in app/node_modules/{ module }/controllers/{ controller }Controller
                        type: 'controller'
                        route: '{ module }/controllers/{ controller }'
                        camel: true
                        suffix: 'Controller'
                    }
                    {
                        # if it exists, render the view defined in app/node_modules/{ module }/views/{ controller }/{ Action }View
                        type: 'view'
                        route: '{ module }/views/{ controller }/{ action }'
                        camel: true
                        suffix: 'View'
                    }
                    {
                        # if it exists, display the template file app/node_modules/{ module }/templates/{ controller }/{ action }
                        type: 'template'
                        route: '{ module }/templates/{ controller }/{ action }'
                    }
                ]

        # called when a matching engine was found but no handler is appropriate
        onRouteChangeFailure: (err, { container })->
            container.innerHTML = err
            return

        # called when no matching engine was found
        otherwise: (options, done)->
            # Because we are redirecting to another page, mark the current process as done.
            # There cannot be 2 rendering task in the same process
            done()

            # Once the current process is marked as done,
            # redirect to the default url
            @navigate @engine('default').getUrl(), { trigger: true, replace: true }
            return

        getTitle: (params)->
            # params may be null. ex: default url
            if params
                { module, controller, action } = params
                return i18n.t("#{ module }.#{ controller }.#{ action }.title")

            return

        onRouteChangeSuccess: (rendable, {container, pathParams}, options)->
            if @isMainContainer container
                if title = @getTitle(pathParams)
                    document.title = @getTitle(pathParams) + ' - Tutorial'

                # Publicly notify onRouteChangeSuccess
                # letting any third party tasks as tests know when to start running tests
                # appConfig is a global object defined in app/assets/index.jst
                if 'function' is typeof appConfig.onRouteChangeSuccess
                    appConfig.onRouteChangeSuccess()
            return
